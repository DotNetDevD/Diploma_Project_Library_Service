// <auto-generated />
using System;
using LibraryAggregator.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAggregator.DataLayer.Migrations
{
    [DbContext(typeof(LibraryDataBaseContext))]
    [Migration("20230204110859_ChangeCoverImgPathForBooks")]
    partial class ChangeCoverImgPathForBooks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuthorId")
                        .HasName("PK__Author__70DAFC34E9BADC14");

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FirstName = "Лев",
                            LastName = "Толстой",
                            MiddleName = "Николаевич"
                        },
                        new
                        {
                            AuthorId = 2,
                            FirstName = "Антон",
                            LastName = "Чехов",
                            MiddleName = "Павлович"
                        },
                        new
                        {
                            AuthorId = 3,
                            FirstName = "Джефри",
                            LastName = "Рихтер"
                        },
                        new
                        {
                            AuthorId = 4,
                            FirstName = "Михаил",
                            LastName = "Булгаков",
                            MiddleName = "Афанасьевич"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.AuthorsBook", b =>
                {
                    b.Property<int>("AuthorsBooksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorsBooksId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsBooksId")
                        .HasName("PK__AuthorsB__E0C25E886755A2F4");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsBooks");

                    b.HasData(
                        new
                        {
                            AuthorsBooksId = 1,
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorsBooksId = 2,
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            AuthorsBooksId = 3,
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            AuthorsBooksId = 4,
                            AuthorId = 4,
                            BookId = 4
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("CoverImgPath")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("nvarchar(23)")
                        .HasColumnName("ISBN");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId")
                        .HasName("PK__Book__3DE0C207BE51473D");

                    b.HasIndex(new[] { "Isbn" }, "UQ__Book__447D36EA06ADE972")
                        .IsUnique();

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CoverImgPath = "https://cache3.youla.io/files/images/780_780/5b/a5/5ba5eb0780e08eb32e7dd903.jpg",
                            Description = "Любовь",
                            Isbn = "978-5-9268-2544-9",
                            PageCount = 1130,
                            PublishDate = new DateTime(1877, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Анна Каренина"
                        },
                        new
                        {
                            BookId = 2,
                            CoverImgPath = "https://images.onlinetestpad.com/e7/1c/4b158ed94c1280f7d5598a4db559.jpg",
                            Description = "Ошибки",
                            Isbn = "978-5-389-16173-3",
                            PageCount = 960,
                            PublishDate = new DateTime(1898, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Человек в футляре"
                        },
                        new
                        {
                            BookId = 3,
                            CoverImgPath = "https://i.simpalsmedia.com/999.md/BoardImages/900x900/e059d58b94220cddeed88f43785317f2.jpg",
                            Description = "Хорошо",
                            Isbn = "978-5-7502-0348-2",
                            PageCount = 896,
                            PublishDate = new DateTime(2008, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "CLR via C#"
                        },
                        new
                        {
                            BookId = 4,
                            CoverImgPath = "https://avatars.dzeninfra.ru/get-zen_doc/2816669/pub_5ee20b1557defd169d7c3d5d_5ee20b4247f3067b1b8556af/scale_1200",
                            Description = "Мастер крут",
                            Isbn = "978-5-04-102789-6",
                            PageCount = 1130,
                            PublishDate = new DateTime(1966, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Мастер и Маргарита"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.BooksGenre", b =>
                {
                    b.Property<int>("BooksGenresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BooksGenresId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BooksGenresId")
                        .HasName("PK__BooksGen__8D4DA176FE0124EF");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BooksGenres");

                    b.HasData(
                        new
                        {
                            BooksGenresId = 1,
                            BookId = 1,
                            GenreId = 4
                        },
                        new
                        {
                            BooksGenresId = 2,
                            BookId = 2,
                            GenreId = 5
                        },
                        new
                        {
                            BooksGenresId = 3,
                            BookId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            BooksGenresId = 4,
                            BookId = 4,
                            GenreId = 2
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.BooksLibrary", b =>
                {
                    b.Property<int>("BooksLibrariesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BooksLibrariesId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("BooksLibrariesId")
                        .HasName("PK__BooksLib__D9FCBEB6058BCAE3");

                    b.HasIndex("BookId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BooksLibraries");

                    b.HasData(
                        new
                        {
                            BooksLibrariesId = 1,
                            BookId = 1,
                            LibraryId = 1
                        },
                        new
                        {
                            BooksLibrariesId = 2,
                            BookId = 2,
                            LibraryId = 1
                        },
                        new
                        {
                            BooksLibrariesId = 3,
                            BookId = 3,
                            LibraryId = 1
                        },
                        new
                        {
                            BooksLibrariesId = 4,
                            BookId = 4,
                            LibraryId = 1
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genre__0385057E1C92AF8D");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Type = "Любовный роман"
                        },
                        new
                        {
                            GenreId = 2,
                            Type = "Модернизм в литературе"
                        },
                        new
                        {
                            GenreId = 3,
                            Type = "Техническая литература"
                        },
                        new
                        {
                            GenreId = 4,
                            Type = "роман"
                        },
                        new
                        {
                            GenreId = 5,
                            Type = "рассказ"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.ImagesForCarousel", b =>
                {
                    b.Property<int>("ImagesForCarouselId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagesForCarouselId"));

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImagesForCarouselId");

                    b.HasIndex("LibraryId");

                    b.ToTable("ImagesForCarousel");

                    b.HasData(
                        new
                        {
                            ImagesForCarouselId = 1,
                            LibraryId = 1,
                            Link = "https://pbs.twimg.com/media/FCjAA-kXEAQbwqC?format=jpg&name=medium"
                        },
                        new
                        {
                            ImagesForCarouselId = 2,
                            LibraryId = 1,
                            Link = "https://extraguide.ru/images/blog/2020/12-12-3iz798-natsionalnaya-biblioteka-belarusi.jpeg"
                        },
                        new
                        {
                            ImagesForCarouselId = 3,
                            LibraryId = 1,
                            Link = "https://teenage.by/uploads/articlesImage/1552289035"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorPhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HistoryOfLibrary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryId")
                        .HasName("PK__Library__A136475FA23EBF26");

                    b.ToTable("Library", (string)null);

                    b.HasData(
                        new
                        {
                            LibraryId = 1,
                            Address = "просп.Независимости, 11б",
                            AgeGroup = "Нет ограничений ",
                            ChartLink = "https://yandex.by/maps/org/natsionalnaya_biblioteka_belarusi/1087338903/?ll=27.647557%2C53.930867&z=16.48",
                            CoverImage = "https://www.belarus.by/dadvimages/001339_318669.jpg",
                            DirectorPhotoLink = "https://www.belarus.by/dadvimages/001339_318669.jpg",
                            Email = "www.nlb.by",
                            HistoryOfLibrary = "Национальная библиотека Беларуси (НББ) была основана постановлением Совета народных комиссаров БССР в 1922 году как Белорусская государственная и университетская библиотека Белорусского государственного университета (БГУ). На момент открытия фонды библиотеки насчитывали всего 60 тысяч экземпляров, которыми пользовались 1,1 тысячи человек. Первым собственным зданием библиотеки стал Юбилейный дом на Захарьевской улице (ныне — проспект Независимости). Постановлением СНК БССР от 14 мая 1926 году библиотека была выведена из состава БГУ и реорганизована в Белорусскую государственную библиотеку. В 1932 году библиотеке было присвоено имя В. И. Ленина. В тот же год библиотека получила новое здание архитектора Г. Лаврова в конструктивистском стиле. ",
                            Name = "Национальная библиотека Минска",
                            PhoneNumber = "+375 17 368-37-37",
                            ShortDiscription = "Национальная библиотека Беларуси (НББ)"
                        },
                        new
                        {
                            LibraryId = 2,
                            Address = "Улица Веры Хоружей 16",
                            AgeGroup = "Нет ограничений",
                            ChartLink = "https://yandex.by/maps/org/natsionalnaya_biblioteka_belarusi/1087338903/?ll=27.647557%2C53.930867&z=16.48",
                            CoverImage = "https://publib.by/wp-content/uploads/2022/06/czentralnaya-biblioteka-imeni-yanki-kupaly-1.jpg",
                            DirectorPhotoLink = "https://publib.by/wp-content/uploads/2022/06/czentralnaya-biblioteka-imeni-yanki-kupaly-1.jpg",
                            Email = "www.publib.by/",
                            HistoryOfLibrary = "Сёння Цэнтральная бібліятэка імя Янкі Купалы – гэта: ТРАДЫЦЫЯ БЫЦЬ ПАТРЭБНАЙ",
                            Name = "Библиотека им. Янки Купалы",
                            PhoneNumber = "8 017 242-21-15",
                            ShortDiscription = "Цэнтральная бібліятэка імя Янкі Купалы"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.OperatingModes", b =>
                {
                    b.Property<int>("OperatingModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatingModeId"));

                    b.Property<string>("CleanUpDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("StartWork")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatingModeId");

                    b.HasIndex("LibraryId");

                    b.ToTable("OperatingModes");

                    b.HasData(
                        new
                        {
                            OperatingModeId = 1,
                            CleanUpDay = "Понедельник",
                            EndWork = "20:00",
                            LibraryId = 1,
                            StartWork = "8:00"
                        },
                        new
                        {
                            OperatingModeId = 2,
                            CleanUpDay = "Пятница",
                            EndWork = "22:00",
                            LibraryId = 1,
                            StartWork = "10:00"
                        },
                        new
                        {
                            OperatingModeId = 3,
                            CleanUpDay = "Среда",
                            EndWork = "22:00",
                            LibraryId = 1,
                            StartWork = "10:00"
                        });
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.AuthorsBook", b =>
                {
                    b.HasOne("LibraryAggregator.DataLayer.Entities.Author", "Author")
                        .WithMany("AuthorsBooks")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__AuthorsBo__Autho__3B75D760");

                    b.HasOne("LibraryAggregator.DataLayer.Entities.Book", "Book")
                        .WithMany("AuthorsBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__AuthorsBo__BookI__3C69FB99");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.BooksGenre", b =>
                {
                    b.HasOne("LibraryAggregator.DataLayer.Entities.Book", "Book")
                        .WithMany("BooksGenres")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksGenr__BookI__46E78A0C");

                    b.HasOne("LibraryAggregator.DataLayer.Entities.Genre", "Genre")
                        .WithMany("BooksGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksGenr__Genre__47DBAE45");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.BooksLibrary", b =>
                {
                    b.HasOne("LibraryAggregator.DataLayer.Entities.Book", "Book")
                        .WithMany("BooksLibraries")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksLibr__BookI__412EB0B6");

                    b.HasOne("LibraryAggregator.DataLayer.Entities.Library", "Library")
                        .WithMany("BooksLibraries")
                        .HasForeignKey("LibraryId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksLibr__Libra__4222D4EF");

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.ImagesForCarousel", b =>
                {
                    b.HasOne("LibraryAggregator.DataLayer.Entities.Library", "Library")
                        .WithMany("ImagesForCarousel")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.OperatingModes", b =>
                {
                    b.HasOne("LibraryAggregator.DataLayer.Entities.Library", "Libraries")
                        .WithMany("OperatingModes")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Libraries");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Author", b =>
                {
                    b.Navigation("AuthorsBooks");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Book", b =>
                {
                    b.Navigation("AuthorsBooks");

                    b.Navigation("BooksGenres");

                    b.Navigation("BooksLibraries");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Genre", b =>
                {
                    b.Navigation("BooksGenres");
                });

            modelBuilder.Entity("LibraryAggregator.DataLayer.Entities.Library", b =>
                {
                    b.Navigation("BooksLibraries");

                    b.Navigation("ImagesForCarousel");

                    b.Navigation("OperatingModes");
                });
#pragma warning restore 612, 618
        }
    }
}
